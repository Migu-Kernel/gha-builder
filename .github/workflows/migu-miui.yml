# MIUI - 5k only 

name: MG-alioth-miui-zycromerz-clang20-20250129

on:
  pull_request:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title'
        required: false
      KERNEL_TREE:
        description: 'Kernel Tree'
        default: 'https://github.com/Migu-Kernel/kernel_xiaomi_sm8250'
        required: true
      KERNEL_TREE_BRANCH:
        description: 'Kernel Tree Branch'
        default: 'miui'
        required: true
      CODENAME:
        description: 'Phone Codename'
        default: 'alioth'
        required: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
        default: 'https://github.com/Migu-Kernel/anykernel3'
        required: false
      CUSTOM_SED:
        description: 'Custom Kernel Version'
        default: '-Migu'
        required: false
      COMPILER:
        description: 'default=neutron, write aosp for aosp 20 clang, zyc for zycromerz'
        default: 'zyc'
        required: false
      GCC:
        description: 'Use LinageOS GCC prebuilts'
        default: 'true'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      UPLOAD_TO_RELEASE: false

    steps:
      - name: Install Dependencies
        run: sudo apt install flex libncurses6

      - name: Download & Extract Clang
        run: |
          if [[ "${{ github.event.inputs.COMPILER }}" == "aosp" ]]; then
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
            mkdir clang
            tar -xf clang.tar.gz -C clang
          elif [[ "${{ github.event.inputs.COMPILER }}" == "zyc" ]]; then
            wget https://github.com/ZyCromerZ/Clang/releases/download/20.0.0git-20250129-release/Clang-20.0.0git-20250129.tar.gz -O clang.tar.gz
            mkdir clang
            tar -xf clang.tar.gz -C clang
          else 
            wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
            mkdir clang
            unzstd -d clang.tar.zst
            tar -xf clang.tar -C clang
          fi

      - name: Seting up GCC
        if: inputs.GCC == 'true'
        run: |
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 arm-linux-androideabi-4.9
          export PATH="$(pwd)/arm-linux-androideabi-4.9/bin:$PATH"
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 aarch64-linux-android-4.9
          export PATH="$(pwd)/aarch64-linux-android-4.9/bin:$PATH"
          
      - name: Set Kernel Environment Variables
        run: |
            echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH }}" >> $GITHUB_ENV
          
      - name: Checkout Kernel via PAT
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git clone --depth=1 \
          --branch "${{ env.KERNEL_TREE_BRANCH }}" \
          https://x-access-token:${GH_PAT}@github.com/Migu-Kernel/kernel_xiaomi_sm8250.git \
          kernel_tree

      # - name: Change different battery type (BACK TO NORMAL)
      #   run: |
      #     cd kernel_tree
      #     sed -i -e '/qcom,j3s-batt-profile;/d' arch/arm64/boot/dts/vendor/qcom/alioth-sm8250.dtsi
      
      - name: Kernel Version
        run: |
          cd kernel_tree
          if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-Migu" ]]; then
            sed -i -e 's/CONFIG_LOCALVERSION="-Migu"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/xiaomi/migu-common.config
          fi
      
      # - name: Apply Patches
      #   run: |
      #     cd kernel_tree
      #     mkdir -p KernelSU-Next
      #     bash nextpatch.sh
          
      # - name: Apply Modifications (if modified build)
      #   run: |
      #     cd kernel_tree
      #     # sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
      #     # sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
      #     # sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
      #     # sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
      #     # sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
      #     sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;/qcom,mdss-pan-physical-width-dimension = <700>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-k11a-38-08-0a-dsc-cmd.dtsi
      #     sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;/qcom,mdss-pan-physical-height-dimension = <1540>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-k11a-38-08-0a-dsc-cmd.dtsi
      
      - name: Build Kernel
        run: |
          export PATH="$(pwd)/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=ARM64
          export KBUILD_BUILD_USER="ncpt"
          export KBUILD_BUILD_HOST="revolution"
          export KBUILD_BUILD_TIMESTAMP="$(TZ=UTC-7 date)"
          export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          cd kernel_tree
          make O=out alioth_defconfig vendor/xiaomi/migu-common.config
          make O=out CC=clang -j$(nproc --all) HOSTCC=gcc LD=ld.lld AS=llvm-as AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM=1 LLVM_IAS=1 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
          # mv out/arch/arm64/boot/dtbo.img ../dtbo.img
          # mv out/arch/arm64/boot/dtb ../dtb
          # cp out/arch/arm64/boot/Image.gz ../Image.gz
          find out -name '*.dtb' -exec cat {} + > ../dtb
          find out -name 'Image' -exec cat {} + > ../Image
          find out -name 'dtbo.img' -exec cat {} + > ../dtbo.img

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: |
            dtbo.img
            dtb
            Image

  package_anykernel:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Kernel Build
        uses: actions/download-artifact@v4
        with:
          name: kernel-build
          path: kernel-build
          
      - name: Clone AnyKernel3
        run: git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b main AnyKernel3

      - name: Move Kernel Files to AnyKernel3
        run: |
          mv kernel-build/* AnyKernel3/

      - name: Define ZIP Name
        run: |
          COMPILED_DATE=$(date +%Y%m%d)
          echo "ZIP_NAME=Migu-${{ github.event.inputs.CODENAME }}-$COMPILED_DATE" >> $GITHUB_ENV
      
      - name: Upload Flashable Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: |
            AnyKernel3/
            !AnyKernel3/.git
            !AnyKernel3/.github
            !AnyKernel3/README.md
            !AnyKernel3/LICENSE
            
      
